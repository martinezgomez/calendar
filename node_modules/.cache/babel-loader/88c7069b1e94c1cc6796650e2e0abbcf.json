{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\misProyectos\\\\calendar\\\\calendar\\\\src\\\\components\\\\Calendar\\\\Calendar.jsx\",\n    _s = $RefreshSig$();\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport React, { useState, useEffect } from 'react';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nimport { useForm } from \"react-hook-form\";\nimport { CalendarService } from \"../../Services/CalendarService\";\nexport default function Calendar() {\n  _s();\n\n  //hook para el formulario\n  const {\n    register,\n    handleSubmit\n  } = useForm();\n  const {\n    selectInfo,\n    setSelectInfo\n  } = useForm(); //Hook de estado para cargar los datos de las citas\n\n  const [events, setEvents] = useState([]); //Hook de estado para abrir o cerrar la ventana modal\n\n  const [state = false, setState] = useState(); //opciones de los datos que muestra el componente full calendar\n\n  const options = {\n    plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n    displayEventEnd: true,\n    defaultView: 'dayGridMonth',\n    defaultDate: '2021-01-01',\n    header: {\n      left: 'prev, next',\n      center: 'title',\n      right: 'dayGridMonth, t1meGr1dWeek, t1meGr1dDay'\n    },\n    editable: false\n  }; //funcion para abrir o cerrar el modal\n\n  const openModal = () => {\n    setState(!state);\n  }; //instancia del servicio de peticiones al back\n\n\n  const calendarService = new CalendarService(); //peticion get axios para traer los datos del back\n\n  useEffect(() => {\n    calendarService.getEvents().then(data => setEvents(data));\n  }, []); // eslint-disable-line react-hooks/exhaustive-deps\n  //peticion post de axios para guardar una nueva alarma\n\n  const onSubmit = form => {\n    calendarService.setEvents(form).then(data => setEvents(data));\n    openModal();\n  };\n\n  const handleDateSelect = selectInfo => {\n    openModal();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"class\",\n      children: [/*#__PURE__*/_jsxDEV(FullCalendar, {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n        headerToolbar: {\n          left: 'prev,next today',\n          center: 'title',\n          right: 'dayGridMonth,timeGridWeek,timeGridDay'\n        },\n        initialView: \"dayGridMonth\",\n        editable: true,\n        selectable: true,\n        selectMirror: true,\n        dayMaxEvents: true,\n        events: events,\n        options: options,\n        select: handleDateSelect\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        isOpen: state,\n        children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n          children: \"Add Alarm in day \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"form\",\n            onSubmit: handleSubmit(onSubmit),\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"date\",\n              id: \"date\",\n              type: \"date\",\n              value: selectInfo,\n              readOnly: true,\n              ref: register()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"title\",\n              id: \"title\",\n              type: \"time\",\n              placeholder: \"Add name of alarm\",\n              ref: register()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"start\",\n              id: \"start\",\n              type: \"time\",\n              placeholder: \"2021-01-01T16:00:00\",\n              ref: register()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              name: \"end\",\n              id: \"end\",\n              type: \"datetime\",\n              placeholder: \"2021-01-01T16:30:00\",\n              ref: register()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(ModalFooter, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            onClick: handleSubmit(onSubmit),\n            children: \"Save\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"secondary\",\n            onClick: openModal,\n            children: \"Close\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Calendar, \"VOZVFL0O/oEFp8G66viVpEr0StQ=\", false, function () {\n  return [useForm, useForm];\n});\n\n_c = Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["D:/misProyectos/calendar/calendar/src/components/Calendar/Calendar.jsx"],"names":["React","useState","useEffect","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","Button","Modal","ModalHeader","ModalBody","ModalFooter","useForm","CalendarService","Calendar","register","handleSubmit","selectInfo","setSelectInfo","events","setEvents","state","setState","options","plugins","displayEventEnd","defaultView","defaultDate","header","left","center","right","editable","openModal","calendarService","getEvents","then","data","onSubmit","form","handleDateSelect"],"mappings":"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","sourcesContent":["\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport React, {useState, useEffect} from 'react'\r\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from \"reactstrap\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport {CalendarService} from \"../../Services/CalendarService\";\r\n\r\nexport default function Calendar() {\r\n    //hook para el formulario\r\n    const { register, handleSubmit} = useForm();\r\n\r\n    const { selectInfo, setSelectInfo} = useForm();\r\n\r\n    //Hook de estado para cargar los datos de las citas\r\n    const [events, setEvents] = useState([]);\r\n\r\n    //Hook de estado para abrir o cerrar la ventana modal\r\n    const [state = false, setState] = useState();\r\n\r\n    //opciones de los datos que muestra el componente full calendar\r\n    const options = {\r\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\r\n        displayEventEnd: true,\r\n        defaultView: 'dayGridMonth',\r\n        defaultDate: '2021-01-01',\r\n        header: {\r\n            left: 'prev, next',\r\n            center: 'title',\r\n            right: 'dayGridMonth, t1meGr1dWeek, t1meGr1dDay'\r\n        },\r\n        editable: false,\r\n    };\r\n\r\n    //funcion para abrir o cerrar el modal\r\n    const openModal = () => {\r\n\r\n        setState(!state);\r\n    }\r\n\r\n    //instancia del servicio de peticiones al back\r\n    const calendarService = new CalendarService();\r\n\r\n    //peticion get axios para traer los datos del back\r\n    useEffect(() => {\r\n        calendarService.getEvents().then(data => setEvents(data));\r\n    }, []);// eslint-disable-line react-hooks/exhaustive-deps\r\n\r\n    //peticion post de axios para guardar una nueva alarma\r\n    const onSubmit = form => {\r\n        calendarService.setEvents(form).then(data => setEvents(data));\r\n        openModal()\r\n    }\r\n\r\n    const handleDateSelect = (selectInfo) => {\r\n        openModal()\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"class\">\r\n                <FullCalendar\r\n                    plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                    headerToolbar={{\r\n                        left: 'prev,next today',\r\n                        center: 'title',\r\n                        right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n                    }}\r\n                    initialView='dayGridMonth'\r\n                    editable={true}\r\n                    selectable={true}\r\n                    selectMirror={true}\r\n                    dayMaxEvents={true}\r\n                    events={events}\r\n                    options={options}\r\n                    select={handleDateSelect}\r\n                />\r\n                <Modal isOpen={state}>\r\n                    <ModalHeader>\r\n                        Add Alarm in day {}\r\n                    </ModalHeader>\r\n                    <ModalBody>\r\n                        <form className=\"form\"  onSubmit={handleSubmit(onSubmit)}>\r\n                            <input name=\"date\" id=\"date\" type=\"date\" value={selectInfo} readOnly={true} ref={register()}/>\r\n                            <input name=\"title\" id=\"title\" type=\"time\" placeholder=\"Add name of alarm\" ref={register()}/>\r\n                            <input name=\"start\" id=\"start\" type=\"time\" placeholder=\"2021-01-01T16:00:00\" ref={register()}/>\r\n                            <input name=\"end\" id=\"end\" type=\"datetime\" placeholder=\"2021-01-01T16:30:00\" ref={register()}/>\r\n                        </form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"primary\" onClick={handleSubmit(onSubmit)}>Save</Button>\r\n                        <Button color=\"secondary\" onClick={openModal}>Close</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}