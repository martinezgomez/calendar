{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\misProyectos\\\\calendar\\\\calendar\\\\src\\\\components\\\\Calendar\\\\Calendar2.jsx\";\nimport React from 'react';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { INITIAL_EVENTS, createEventId } from './eventUtils';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from \"reactstrap\";\nexport default class Calendario2 extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weekendsVisible: true,\n      currentEvents: []\n    };\n\n    this.handleWeekendsToggle = () => {\n      this.setState({\n        weekendsVisible: !this.state.weekendsVisible\n      });\n    };\n\n    this.handleDateSelect = selectInfo => {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n\n    this.handleEventClick = clickInfo => {\n      clickInfo.event.remove();\n    };\n\n    this.handleEvents = events => {\n      this.setState({\n        currentEvents: events\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demo-app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"demo-app-main\",\n        children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n          plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n          headerToolbar: {\n            left: 'prev,next today',\n            center: 'title',\n            right: 'dayGridMonth,timeGridWeek,timeGridDay'\n          },\n          initialView: \"dayGridMonth\",\n          editable: true,\n          selectable: true,\n          selectMirror: true,\n          dayMaxEvents: true,\n          weekends: this.state.weekendsVisible,\n          initialEvents: INITIAL_EVENTS // alternatively, use the `events` setting to fetch from a feed\n          ,\n          select: this.handleDateSelect,\n          eventContent: renderEventContent // custom render function\n          ,\n          eventClick: this.handleEventClick,\n          eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n          /* you can update a remote database when these fire:\r\n          eventAdd={function(){}}\r\n          eventChange={function(){}}\r\n          eventRemove={function(){}}\r\n          */\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 13\n    }, this);\n  }\n\n  renderSidebar() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demo-app-sidebar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"demo-app-sidebar-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"All Events (\", this.state.currentEvents.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: this.state.currentEvents.map(renderSidebarEvent)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction renderEventContent(eventInfo) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: eventInfo.timeText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: eventInfo.event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\nfunction renderSidebarEvent(event) {\n  return /*#__PURE__*/_jsxDEV(\"li\", {\n    children: [/*#__PURE__*/_jsxDEV(\"b\", {\n      children: formatDate(event.start, {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"i\", {\n      children: event.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 13\n    }, this)]\n  }, event.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 9\n  }, this);\n}","map":{"version":3,"sources":["D:/misProyectos/calendar/calendar/src/components/Calendar/Calendar2.jsx"],"names":["React","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","Button","Modal","ModalHeader","ModalBody","ModalFooter","Calendario2","Component","state","weekendsVisible","currentEvents","handleWeekendsToggle","setState","handleDateSelect","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","id","start","startStr","end","endStr","allDay","handleEventClick","clickInfo","event","remove","handleEvents","events","render","left","center","right","renderEventContent","renderSidebar","length","map","renderSidebarEvent","eventInfo","timeText","year","month","day"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport { INITIAL_EVENTS, createEventId } from './eventUtils'\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from \"reactstrap\";\r\n\r\nexport default class Calendario2 extends React.Component {\r\n\r\n    state = {\r\n        weekendsVisible: true,\r\n        currentEvents: []\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='demo-app'>\r\n                <div className='demo-app-main'>\r\n                    <FullCalendar\r\n                        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                        headerToolbar={{\r\n                            left: 'prev,next today',\r\n                            center: 'title',\r\n                            right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n                        }}\r\n                        initialView='dayGridMonth'\r\n                        editable={true}\r\n                        selectable={true}\r\n                        selectMirror={true}\r\n                        dayMaxEvents={true}\r\n                        weekends={this.state.weekendsVisible}\r\n                        initialEvents={INITIAL_EVENTS} // alternatively, use the `events` setting to fetch from a feed\r\n                        select={this.handleDateSelect}\r\n                        eventContent={renderEventContent} // custom render function\r\n                        eventClick={this.handleEventClick}\r\n                        eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\r\n                        /* you can update a remote database when these fire:\r\n                        eventAdd={function(){}}\r\n                        eventChange={function(){}}\r\n                        eventRemove={function(){}}\r\n                        */\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderSidebar() {\r\n        return (\r\n            <div className='demo-app-sidebar'>\r\n                <div className='demo-app-sidebar-section'>\r\n                    <h2>All Events ({this.state.currentEvents.length})</h2>\r\n                    <ul>\r\n                        {this.state.currentEvents.map(renderSidebarEvent)}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleWeekendsToggle = () => {\r\n        this.setState({\r\n            weekendsVisible: !this.state.weekendsVisible\r\n        })\r\n    }\r\n\r\n    handleDateSelect = (selectInfo) => {\r\n        let title = prompt('Please enter a new title for your event')\r\n        let calendarApi = selectInfo.view.calendar\r\n\r\n        calendarApi.unselect() // clear date selection\r\n\r\n        if (title) {\r\n            calendarApi.addEvent({\r\n                id: createEventId(),\r\n                title,\r\n                start: selectInfo.startStr,\r\n                end: selectInfo.endStr,\r\n                allDay: selectInfo.allDay\r\n            })\r\n        }\r\n    }\r\n\r\n    handleEventClick = (clickInfo) => {\r\n            clickInfo.event.remove()\r\n\r\n    }\r\n\r\n    handleEvents = (events) => {\r\n        this.setState({\r\n            currentEvents: events\r\n        })\r\n    }\r\n\r\n}\r\n\r\nfunction renderEventContent(eventInfo) {\r\n    return (\r\n        <>\r\n            <b>{eventInfo.timeText}</b>\r\n            <i>{eventInfo.event.title}</i>\r\n        </>\r\n    )\r\n}\r\n\r\nfunction renderSidebarEvent(event) {\r\n    return (\r\n        <li key={event.id}>\r\n            <b>{formatDate(event.start, {year: 'numeric', month: 'short', day: 'numeric'})}</b>\r\n            <i>{event.title}</i>\r\n        </li>\r\n    )\r\n}\r\n"]},"metadata":{},"sourceType":"module"}