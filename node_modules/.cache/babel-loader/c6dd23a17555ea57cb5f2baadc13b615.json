{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\misProyectos\\\\calendar\\\\calendar\\\\src\\\\components\\\\Calendar\\\\Calendar.jsx\";\nimport React from 'react';\nimport FullCalendar, { formatDate } from '@fullcalendar/react';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { CalendarService } from \"../../Services/CalendarService\";\nimport { useForm } from \"react-hook-form\";\nexport default class DemoApp extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      weekendsVisible: true,\n      currentEvents: [],\n      register,\n      events,\n      state: false\n    };\n    this.options = {\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      displayEventEnd: true,\n      defaultView: 'dayGridMonth',\n      defaultDate: '2021-01-01',\n      header: {\n        left: 'prev, next',\n        center: 'title',\n        right: 'dayGridMonth, t1meGr1dWeek, t1meGr1dDay'\n      },\n      editable: false\n    };\n\n    this.handleDateSelect = selectInfo => {\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect(); // clear date selection\n\n      if (title) {\n        calendarApi.addEvent({\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    };\n\n    this.handleEventClick = clickInfo => {\n      clickInfo.event.remove();\n    };\n\n    this.handleEvents = events => {\n      this.setState({\n        currentEvents: events\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"demo-app\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"demo-app-main\",\n        children: /*#__PURE__*/_jsxDEV(FullCalendar, {\n          plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n          headerToolbar: {\n            left: 'prev,next today',\n            center: 'title',\n            right: 'dayGridMonth,timeGridWeek,timeGridDay'\n          },\n          initialView: \"dayGridMonth\",\n          editable: true,\n          selectable: true,\n          selectMirror: true,\n          dayMaxEvents: true,\n          options: options,\n          weekends: this.state.weekendsVisible,\n          select: this.handleDateSelect,\n          eventClick: this.handleEventClick,\n          eventsSet: this.handleEvents // called after events are initialized/added/changed/removed\n\n          /* you can update a remote database when these fire:\r\n          eventAdd={function(){}}\r\n          eventChange={function(){}}\r\n          eventRemove={function(){}}\r\n          */\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/misProyectos/calendar/calendar/src/components/Calendar/Calendar.jsx"],"names":["React","FullCalendar","formatDate","dayGridPlugin","timeGridPlugin","interactionPlugin","CalendarService","useForm","DemoApp","Component","state","weekendsVisible","currentEvents","register","events","options","plugins","displayEventEnd","defaultView","defaultDate","header","left","center","right","editable","handleDateSelect","selectInfo","title","prompt","calendarApi","view","calendar","unselect","addEvent","start","startStr","end","endStr","allDay","handleEventClick","clickInfo","event","remove","handleEvents","setState","render"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport FullCalendar, { formatDate } from '@fullcalendar/react'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport {CalendarService} from \"../../Services/CalendarService\";\r\nimport {useForm} from \"react-hook-form\";\r\n\r\nexport default class DemoApp extends React.Component {\r\n\r\n    state = {\r\n        weekendsVisible: true,\r\n        currentEvents: [],\r\n        register,\r\n        events,\r\n        state: false\r\n    }\r\n\r\n    options = {\r\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\r\n        displayEventEnd: true,\r\n        defaultView: 'dayGridMonth',\r\n        defaultDate: '2021-01-01',\r\n        header: {\r\n            left: 'prev, next',\r\n            center: 'title',\r\n            right: 'dayGridMonth, t1meGr1dWeek, t1meGr1dDay'\r\n        },\r\n        editable: false,\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className='demo-app'>\r\n                <div className='demo-app-main'>\r\n                    <FullCalendar\r\n                        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                        headerToolbar={{\r\n                            left: 'prev,next today',\r\n                            center: 'title',\r\n                            right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n                        }}\r\n                        initialView='dayGridMonth'\r\n                        editable={true}\r\n                        selectable={true}\r\n                        selectMirror={true}\r\n                        dayMaxEvents={true}\r\n                        options={options}\r\n                        weekends={this.state.weekendsVisible}\r\n                        select={this.handleDateSelect}\r\n                        eventClick={this.handleEventClick}\r\n                        eventsSet={this.handleEvents} // called after events are initialized/added/changed/removed\r\n                        /* you can update a remote database when these fire:\r\n                        eventAdd={function(){}}\r\n                        eventChange={function(){}}\r\n                        eventRemove={function(){}}\r\n                        */\r\n                    />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n    handleDateSelect = (selectInfo) => {\r\n        let title = prompt('Please enter a new title for your event')\r\n        let calendarApi = selectInfo.view.calendar\r\n\r\n        calendarApi.unselect() // clear date selection\r\n\r\n        if (title) {\r\n            calendarApi.addEvent({\r\n                title,\r\n                start: selectInfo.startStr,\r\n                end: selectInfo.endStr,\r\n                allDay: selectInfo.allDay\r\n            })\r\n        }\r\n    }\r\n\r\n    handleEventClick = (clickInfo) => {\r\n        clickInfo.event.remove()\r\n\r\n    }\r\n\r\n    handleEvents = (events) => {\r\n        this.setState({\r\n            currentEvents: events\r\n        })\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}